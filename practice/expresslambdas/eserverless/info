10

I had this issue and if anyone comes across it, this github comment fixed my issue.

You can run $ sls offline start --noPrependStageInUrl or add the following to your serverless.yml file

custom:
  serverless-offline:
    noPrependStageInUrl: true
According to the comment:

I had this problem with anything 6+, this was due to the fact that it now defaults to appending 
the staging name to the url path. To revert to the old way, you need to 
add --noPrependStageInUrl 
to the cli or in the serverless file 
custom: serverless-offline 
noPrependStageInUrl: true 
to revert to previous setting. I'm testing it his out but @dherault the functionality is not 
reflecting what is actually happening in AWS.

I was using serverless-offline: "6.7.0" and my index.handler was as below:

const serverless = require("serverless-http");
const express = require("express");
const app = express();

app.get("/", function (req, res) {
  res.send("Hello World!");
});

module.exports.handler = serverless(app);
And my serverless.yml

plugins:
  - serverless-offline

custom:
  serverless-offline:
    noPrependStageInUrl: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2

functions:
  app:
    handler: src/index.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"
Apologies this isn't exactly a great answer but hopefully, someone comes across this and it is a 
solution to their problem.
